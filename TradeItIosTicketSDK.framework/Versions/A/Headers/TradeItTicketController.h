//
//  TicketController.h
//  TradeItTicketViewSDK
//
//  Created by Antonio Reyes on 7/2/15.
//  Copyright (c) 2015 Antonio Reyes. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import "TradeItStockOrEtfTradeSession.h"
#import "TradeItTicketControllerResult.h"

@interface TradeItTicketController : NSObject

/**
 *  Presents the full screen version of the TradeIt Trading Ticket
 *
 *  @param publisherApp Your unique id generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param lastPrice    Last price of the security to be traded
 *  @param view         Presenting view, this is the current UIViewController of your app, on completion we dissmiss the ticket and return control back to this view.
 */
+(void) showFullTicketWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice viewController:(UIViewController *) view;

/**
 *  Presents the full screen version of the TradeIt Trading Ticket
 *
 *  @param publisherApp Your unique id generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param lastPrice    Last price of the security to be traded
 *  @param view         Presenting view, this is the current UIViewController of your app, on completion we dissmiss the ticket and return control back to this view.
 *  @param callback     Code block to be executed after we have returned control of the view back to you.
 */
+(void) showFullTicketWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice viewController:(UIViewController *) view onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Presents the full screen version of the TradeIt Trading Ticket
 *
 *  @param publisherApp Your unique id generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param lastPrice    Last price of the security to be traded
 *  @param orderAction  Order action can be "buy", "sell", "sellShort" or "buyToCover"
 *  @param view         Presenting view, this is the current UIViewController of your app, on completion we dissmiss the ticket and return control back to this view.
 */
+(void) showFullTicketWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice orderAction:(NSString *) action viewController:(UIViewController *) view;

/**
 *  Presents the full screen version of the TradeIt Trading Ticket
 *
 *  @param publisherApp Your unique id generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param lastPrice    Last price of the security to be traded
 *  @param orderAction  Order action can be "buy", "sell", "sellShort" or "buyToCover"
 *  @param view         Presenting view, this is the current UIViewController of your app, on completion we dissmiss the ticket and return control back to this view.
 *  @param callback     Code block to be executed after we have returned control of the view back to you.
 */
+(void) showFullTicketWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice orderAction:(NSString *) action viewController:(UIViewController *) view onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Testing version of showFullTicketWithPublisherApp, the main difference being the inclusion of the Dummy broker
 *
 */
+(void) debugShowFullTicketWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice viewController:(UIViewController *) view;

/**
 *  Testing version of showFullTicketWithPublisherApp, the main difference being the inclusion of the Dummy broker
 *
 */
+(void) debugShowFullTicketWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice viewController:(UIViewController *) view onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;




/**
 *  Create your own instance to have more control over defaults/callbacks, after setting all properties call showTicket
 *
 *  @param publisherApp Your unique id generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param lastPrice    Last price of the security to be traded
 *  @param view         Presenting view, this is the current UIViewController of your app, on completion we dissmiss the ticket and return control back to this view.
 *
 *  @return TradeItTicketController
 */

- (id) initWithPublisherApp: (NSString *) publisherApp symbol:(NSString *) symbol lastPrice:(double) lastPrice viewController:(UIViewController *) view;

/**
 *  The default number of shares to trade
 */
@property int quantity;

/**
 *  The default order action, can only be buy, sell, sellShort or buyToCover
 */
@property (copy) NSString* action;

/**
 *  The default order type, can only be market, limit, stopLimit, or stopMarket
 */
@property (copy) NSString* orderType;

/**
 *  The default order duration. Possible values are day or gtc.
 */
@property (copy) NSString* expiration;

/**
 *  Set this to get access to the Dummy trading brokerage for testing
 */
@property BOOL debugMode;

/**
 *  Completion block called after the ticket has been exited, immediately after returning control to init'd view controller
 */
@property (copy) void (^onCompletion)(TradeItTicketControllerResult * result);

/**
 *  Supply a block that given a symbol will return an updated lastPrice to passed in callback
 *  if refreshQuote is supplied we will NOT use refreshLastPrice
 */
@property (copy) void (^refreshLastPrice)(NSString * symbol, void(^callback)(double lastPrice));

/**
 *  Supply a block that given a symbol will return an updated quote information to passed in callback
 *  if refreshQuote is supplied we will NOT use refreshLastPrice
 */
@property (copy) void (^refreshQuote)(NSString * symbol, void(^callback)(double lastPrice, double priceChangeDollar, double priceChangePercentage, NSString * quoteUpdateTime));

/**
 *  The default is "calculator" for the full calculator view
 *  Alternative is the "detail" view, this value will continue
 *  to be used until the user makes a change on the edit screen
 *  at which point the user selected view will take precedence
 */
@property (copy) NSString * calcScreenDefault;

/**
 *  The full company name, to be displayed on the detail view ticket
 */
@property (copy) NSString * companyName;

/**
 *  The days change in price by dollars, both positive and negative numbers supported
 */
@property (copy) NSNumber * priceChangeDollar;

/**
 *  The days change in price by percentage, both positive and negative numbers supported
 */
@property (copy) NSNumber * priceChangePercentage;

/**
 *  After setting all desired properties, call this method to launch the ticket
 */
-(void) showTicket;

/**
 *  Use this method to clear all linked brokers off device
 */
+(void) clearSavedData;

/**
 *  @return NSArray of brokers the user is linked with, it will use the short names as documented in TradeItEMS Api
 *  if you're displaying this to the end user, you should pass the value(s) through getBrokerDisplayString
 */
+(NSArray *) getLinkedBrokers;

/**
 *  @param brokerIdentifier the broker short name as documented in TradeItEMS Api
 *  @return the consumer friendly version of the broker name (i.e. IB -> Interactive Brokers)
 */
+(NSString *) getBrokerDisplayString:(NSString *) brokerIdentifier;

@end






















